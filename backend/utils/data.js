export const roadmapDetails = {
  frontend: [
  "HTML (Hypertext Markup Language) is the foundation of every web page. It structures the content using elements and attributes, which browsers then interpret and display. Learn about common tags like headings, paragraphs, images, and links, as well as semantic tags such as <header>, <footer>, and <article> that give meaning to the content. Understand the difference between block-level and inline elements, and practice building forms with input fields, buttons, and labels. Spend time creating simple, unstyled pages to strengthen your understanding of how HTML organizes content. Time: 3-4 weeks. Resource: w3Schools HTML Tutorial, MDN HTML Docs.",
  "CSS (Cascading Style Sheets) controls how HTML content looks on the screen, from colors and fonts to layouts and animations. Learn how to style individual elements, group selectors, and apply classes and IDs effectively. Explore modern layout systems like Flexbox and CSS Grid to build complex, responsive designs that work on different devices. Study media queries for mobile-first development, understand the concept of specificity, and use CSS variables to manage repeated styles Understand how to use transitions, animations, and custom properties (CSS variables). Practice making responsive designs that work on mobile and desktop. Time: 3-4 weeks. Resource: MDN CSS Guide, CSS Tricks.",
  "JavaScript brings interactivity to websites, making them dynamic and engaging. It allows you to respond to user actions, update content without refreshing, and create rich web applications. Focus on ES6+ features like promises, async/await, arrow functions, destructuring, and template literals. Learn DOM manipulation, event handling, and form validation. Understand how to work with arrays, objects, and JSON data. Time: 5-6 weeks. Resource: JavaScript.info, MDN JavaScript Docs.",
  "Frontend frameworks make building complex applications faster and more organized. They provide reusable components, powerful state management, and tools for routing between pages. React, Vue, and Angular are popular frameworks for building UI. Start with React for reusable components, hooks, and state management. Learn about props, context API, and basic routing. Practice building small apps like to-do lists and calculators. Time: 6-8 weeks. Resource: React.dev, Vuejs.org, Angular.io.",
  "The best way to solidify frontend skills is by building real projects. Build projects like portfolio sites to showcase your skills. Work on different project types: landing pages, dashboards, and e-commerce layouts. Use Git and GitHub for version control and learn how to deploy with services like Netlify or Vercel. Time: 3-4 weeks. Resource: Frontend Mentor, freeCodeCamp Projects.",
  "Frontend interviews often test both technical and problem-solving skills. Practice common interview questions on frontend concepts and coding. Revise topics like closures, event bubbling, and responsive design patterns. Solve coding challenges to improve problem-solving speed. Time: Continuous. Resource: LeetCode, Frontend Interview Handbook, CSSBattle.",
  "CSS frameworks and UI libraries speed up development by providing ready-to-use styles and components. Learn CSS frameworks and UI libraries to speed up development. Explore Bootstrap, Tailwind CSS, and Material UI. Understand how to customize components and themes to match branding. Practice building responsive layouts quickly using these tools. Time: 2-3 weeks. Resource: TailwindCSS.com, GetBootstrap.com, MUI.com.",
  "Great frontend development is not just about looks—it’s also about performance and inclusivity. Master performance optimization and accessibility. Learn techniques to reduce page load time such as lazy loading, image compression, and code splitting. Understand Web Content Accessibility Guidelines (WCAG) to make sites usable for all users. Use browser developer tools to debug and optimize your frontend. Time: 3-4 weeks. Resource: web.dev, Lighthouse, A11y Project.",
],
  backend: [ 
  "It is essential to have a solid grasp of basic programming concepts. Pick a backend language and learn its syntax and ecosystem deeply. Popular choices are Node.js (JavaScript), Python, Java, and Go. Learn about variables, loops, functions, error handling, and package management. Understand how to set up a local development environment. Time: 3-4 weeks. Resource: Node.js Docs, Python.org, Java Tutorials.",
  "Databases are the backbone of backend applications. Understand relational and non-relational databases and how to query them. Learn SQL basics such as SELECT, INSERT, UPDATE, DELETE, and JOIN for relational databases like MySQL or PostgreSQL. For NoSQL (MongoDB), learn collections, documents, and aggregation pipelines. Time: 3-4 weeks. Resource: MySQL Docs, MongoDB University.",
  "Learn how to create APIs that frontend can consume via REST or GraphQL. Understand HTTP methods (GET, POST, PUT, DELETE), status codes, and request/response cycles. Learn about routing, middleware, and controllers in your chosen backend framework. Time: 4-5 weeks. Resource: Express.js Docs, Apollo GraphQL Docs.",
  "Implement user authentication and secure your backend with best practices. Learn about sessions, cookies, JWT (JSON Web Tokens), password hashing (bcrypt), and OAuth for third-party logins. Understand HTTPS, CORS, and how to protect against SQL injection and XSS attacks. Time: 3-4 weeks. Resource: Auth0 Blog, OWASP Cheat Sheets.",
  "Explore scaling apps using load balancing, caching, and microservices. Learn about horizontal vs vertical scaling, database indexing, and CDN usage. Use caching systems like Redis or Memcached. Understand how to design microservices and communicate via message queues. Time: 4-6 weeks. Resource: Redis.io, AWS Architecture Blog.",
  "Integrate backend with cloud platforms for deployment. Learn how to use services like AWS, Google Cloud, or Azure. Understand server provisioning, CI/CD pipelines, and containerization with Docker. Time: 3-4 weeks. Resource: AWS Free Tier, Docker Docs.",
  "Implement backend testing to ensure reliability. Learn unit testing, integration testing, and end-to-end testing. Use frameworks like Jest, Mocha, or PyTest depending on your backend language. Understand test coverage and mocking. Time: 2-3 weeks. Resource: Jest Docs, Mocha Docs, PyTest Docs.",
  "Monitor, log, and maintain backend systems. Learn how to set up logging with tools like Winston or Log4j. Monitor performance and uptime using services like Prometheus, Grafana, or New Relic. Understand how to set up error tracking and alerting. Time: 2-3 weeks. Resource: Prometheus.io, Grafana.com.",
],
  "data analyst": [
  "Data analysis starts with understanding the basics—what data is, how it’s collected, and how it’s structured. Learn about different types of data (quantitative vs. qualitative), common formats like CSV, JSON, and Excel, and the difference between structured and unstructured data. Understand key concepts such as data types, missing values, and outliers. Get familiar with data lifecycle stages: collection, cleaning, analysis, and visualization. Build a strong foundation so you can confidently work with data from any source. Time: 3-4 weeks. Resource: 'Data Analytics Basics' by IBM on Coursera, freeCodeCamp articles.",
  "Excel and Google Sheets are essential tools for data analysts. Learn basic operations like sorting, filtering, and formatting data, then move on to advanced formulas such as VLOOKUP, INDEX/MATCH, IF statements, and text manipulation functions. Practice using pivot tables to summarize large datasets and create dynamic dashboards. Explore chart types and conditional formatting to make data insights stand out. These skills are especially useful for quick analyses, reporting, and stakeholder communication without needing programming. Time: 2-3 weeks. Resource: ExcelJet, Google's Analytics Academy.",
  "SQL (Structured Query Language) is the standard language for interacting with databases. Learn how to write queries to retrieve, filter, and aggregate data from large datasets. Study key commands like SELECT, WHERE, GROUP BY, ORDER BY, and JOINs. Practice with real-world databases to understand indexing, subqueries, and data relationships. Learn how to combine multiple tables, clean data at the query level, and prepare datasets for analysis. SQL is a must-have skill for accessing and working with company data efficiently. Time: 2-3 weeks. Resource: Mode SQL Tutorial, Khan Academy SQL.",
  "Cleaning data is one of the most important steps in analysis. Learn how to identify and handle missing values, correct inconsistencies, remove duplicates, and format data correctly. Use tools like Excel, Python (Pandas), or R to preprocess datasets. Understand the importance of data normalization, data type conversions, and encoding categorical variables. Build workflows to make data cleaning faster and more repeatable so you can spend more time analyzing instead of fixing issues. Time: 2-3 weeks. Resource: Tableau Public Training, Power BI Learning by Microsoft.",
  "Statistics is the backbone of data analysis. Learn about descriptive statistics (mean, median, mode, variance, standard deviation) and how they summarize data. Understand probability distributions, hypothesis testing, and confidence intervals. Get familiar with correlation vs. causation and learn how to interpret statistical results correctly. Apply statistical thinking to real datasets to identify patterns and make informed decisions. Time: 3-4 weeks. Resource: Kaggle Python Course, DataCamp.",
  "Programming makes analysis more efficient and scalable. Learn Python (with libraries like Pandas, NumPy, and Matplotlib) or R (with packages like dplyr, ggplot2, and tidyr). Start with loading and exploring datasets, then move to advanced operations like group aggregations, time-series analysis, and automated data cleaning. Learn to visualize data programmatically and perform statistical modeling. Practice building small scripts that solve repetitive analysis tasks. Time: 3-4 weeks. Resource: Khan Academy Statistics, 'Practical Statistics for Data Scientists'.",
  "Data visualization is how you communicate findings effectively. Learn the principles of good design, chart selection, and visual storytelling. Practice creating dashboards and reports using tools like Tableau, Power BI, or Python’s Matplotlib/Seaborn. Understand when to use bar charts, line charts, scatter plots, heatmaps, and more. Focus on clarity, avoiding misleading visuals, and using color and annotations to highlight key insights. Time: 2-3 weeks. Resource: Kaggle datasets, 'Data Wrangling with pandas'.",
  "Solidify your skills by creating real-world data analysis projects. Examples include sales trend analysis, customer segmentation, A/B testing results, or public dataset explorations. Document your process from data cleaning to final visualization. Use GitHub to store your code, queries, and project reports. Publish dashboards online to make your work shareable. A strong portfolio demonstrates your analytical thinking and technical ability to employers. Time: 4-6 weeks. Resource: Kaggle, GitHub, Google Data Analytics Capstone Project on Coursera.",
],
  "data scientist": [
  "Python and R are the most widely used languages in data science. Learn variables, data types, loops, conditionals, functions, and data structures. Practice writing simple programs, performing calculations, and manipulating strings and lists. These fundamentals are essential for data analysis, data cleaning, and building data-driven models. Strengthen problem-solving skills through small coding exercises. Time: 3-4 weeks. Resource: Learn python, Datacamp",
  "Data science relies heavily on math and statistics. Learn concepts such as probability, descriptive statistics, distributions, correlation, regression, and hypothesis testing. Understand linear algebra basics and matrix operations, which are crucial for machine learning algorithms. Practice solving real-world problems to gain confidence in interpreting and analyzing data. Time: 3-4 weeks. Resource: Khan Academy, coursera",
  "Learn how to manipulate, clean, and analyze datasets. Use Python libraries like Pandas and NumPy, or R’s data frames and dplyr. Understand data wrangling techniques, handling missing values, filtering, grouping, and aggregating data. Practice exploring datasets, identifying trends, and summarizing findings to extract meaningful insights. Time: 4-5 weeks. Resource: pandas org, numpy org",
  "Visualizing data is crucial to communicate insights effectively. Learn libraries like Matplotlib, Seaborn, and Plotly in Python, or ggplot2 in R. Understand how to create bar charts, line plots, scatter plots, histograms, and dashboards. Learn principles of effective visualization, color usage, and storytelling with data. Time: 3-4 weeks. Resource: seaborn, matplotlib",
  "Data often resides in databases. Learn SQL to query, filter, and aggregate data from relational databases. Understand joins, subqueries, indexing, and best practices for working with large datasets. Practice by connecting Python or R to databases and extracting data for analysis. Time: 3-4 weeks. Resource: w3 school for sql, datacamp",
  "Machine learning enables predictive modeling and automation. Learn supervised and unsupervised learning, regression, classification, clustering, and model evaluation metrics. Understand algorithms like linear regression, decision trees, k-means, and random forests. Practice building models using scikit-learn in Python or caret in R, and interpret the results. Time: 5-6 weeks. Resource: scikit-lear, coursera for machine learning",
  "The best way to demonstrate data science skills is by creating real projects. Analyze datasets, build predictive models, and visualize insights. Examples include sales forecasting, customer segmentation, and recommendation systems. Use Git/GitHub for version control and share projects publicly. Focus on clear documentation, reproducible code, and insightful analysis. Time: 4-5 weeks. Resource: Github projects, kaggle",
  "Data science interviews test coding, statistics, and machine learning knowledge. Practice Python/R coding challenges, SQL queries, and algorithm problems. Review key concepts like feature engineering, model evaluation, and A/B testing. Simulate interview scenarios by explaining your thought process and walking through your projects. Time: continuous. Resource: interview bit, kaggle for interview prep"
],
  mobile: [
  "Before diving into mobile development, understand core programming concepts. Learn variables, loops, conditionals, functions, and data structures. Practice writing simple programs in a language suitable for mobile apps such as JavaScript (for React Native), Dart (for Flutter), Java, or Kotlin (for Android). Strengthen your problem-solving skills through small coding exercises and projects. Time: 1 week. Resource: freeCodeCamp article 'Mobile Development Overview', Google Developers Blog.",
  "Choose a framework based on your target platform. React Native and Flutter allow cross-platform development, while Swift and Kotlin are for iOS and Android respectively. Learn component-based architecture, UI widgets, navigation, state management, and platform-specific APIs. Practice building small apps such as calculators, to-do lists, or weather apps. Time: 5-6 week. Resource: Medium articles comparing mobile frameworks, official docs.",
  "Learn how to create responsive and intuitive mobile interfaces. Understand platform-specific design guidelines like Material Design for Android and Human Interface Guidelines for iOS. Study layout systems, styling, touch gestures, animations, and accessibility. Practice creating smooth, interactive, and user-friendly apps. For React Native: JavaScript & React. For Flutter: Dart. For Android: Kotlin. Time: 3–4 weeks. Resource: ReactNative.dev, Dart.dev, developer.android.com.",
  "Understand platform-specific design guidelines like Material Design for Android and Human Interface Guidelines for iOS. Study layout systems, styling, touch gestures, animations, and accessibility. Practice UI development, user interaction, and basic app navigation. Time: 2–3 weeks. Resource: YouTube tutorials (e.g., CodeWithChris, Academind), official docs.",
  "Mobile phones strongly depends on operating system and hardware devices. Work with camera, location, storage, and local databases (SQLite, Realm). Time: 2 weeks. Resource: Expo Docs (React Native), Android/iOS API Docs.",
  "Mobile apps often rely on data from servers. Learn how to fetch, send, and manipulate data using REST APIs or GraphQL. Handle authentication, caching, and offline data storage. Understand error handling, network performance, and secure communication between app and server. Time: 2–3 weeks. Resource: Postman tutorials, Firebase, Supabase, or custom Express APIs.",
  "Learn unit testing, integration testing, and UI testing for mobile apps. Explore testing frameworks like Jest, Detox, or Flutter’s testing tools. Debug efficiently using platform-specific developer tools and emulators. Ensure your apps are stable, responsive, and free from critical bugs. Time: 2 weeks. Resource: React Native Testing Library, Flutter Testing Docs.",
  "Learn performance best practices for mobile apps. Optimize memory usage, reduce app size, improve load times, and handle asynchronous tasks efficiently. Implement proper caching, lazy loading, and minimize unnecessary network requests. Study accessibility and localization to make apps usable for all users. Learn how to deploy to Play Store and App Store, manage updates, and gather user feedback. Time: 1–2 weeks. Resource: Google Play Console, App Store Connect, Dev.to publishing guides.",
],
  devops: [
  "Linux is the backbone of most servers and cloud environments. Learn basic commands, file system navigation, permissions, processes, and shell scripting. Understanding Linux is essential for server management, automation, and deployment tasks. Practice by setting up virtual machines and performing routine administrative tasks. Learn what DevOps is, its culture, and how it bridges development and operations. Time: 1-2 weeks. Resource: 'Introduction to DevOps' by IBM (Coursera), 'What is DevOps?' by Azure Docs.",
  "Git is essential for tracking code changes and collaborating with teams. Learn how to initialize repositories, commit changes, branch, merge, and resolve conflicts. Use GitHub to host repositories, create pull requests, and manage collaboration. These skills are fundamental for DevOps pipelines and CI/CD workflows. Understand branching, merging, pull requests, and GitHub workflows. Time: 1-2 weeks. Resource: GitHub Learning Lab, Atlassian Git Tutorials.",
  "Docker allows you to package applications and dependencies into containers that run consistently across environments. Learn how to build Docker images, run containers, and manage networks and volumes. Understand Docker Compose for multi-container applications and practice deploying sample apps in containers. Time: 2-3 weeks. Resource: docker.com",
  "Learn tools like Ansible, Puppet, or Chef to automate server configuration and deployment. Understand how to write playbooks, manage inventories, and automate repetitive tasks. Automation ensures consistency and reduces manual errors in production environments. Time: 2-3 weeks. Resource: ansible.com, puppet.com",
  "Continuous Integration and Continuous Deployment (CI/CD) automate testing and deployment. Learn tools like Jenkins, GitHub Actions, or GitLab CI/CD to create pipelines that build, test, and deploy applications automatically. Practice by setting up pipelines for sample projects and integrating automated tests. Time: 2-3 weeks. Resource: jenkins.io, github.doc.",
  "DevOps engineers often work with cloud providers like AWS, Azure, or GCP. Learn about cloud computing basics, virtual machines, storage, networking, and serverless services. Practice deploying applications, managing resources, and scaling infrastructure on the cloud. Time: 3-4 weeks. Resource: cloud.google.com.training",
  "Monitoring ensures applications and infrastructure run smoothly. Learn tools like Prometheus, Grafana, ELK Stack, or CloudWatch. Understand metrics, alerts, and log aggregation. Practice setting up dashboards, monitoring system health, and responding to incidents. Time: 4-6 weeks. Resource: grafana.com.",
  "Security is critical in DevOps. Learn about network security, encryption, access control, and vulnerability scanning. Follow best practices for secure deployments, secrets management, and compliance. Understanding security ensures safe and reliable operations. Time: 2-3 weeks. Resource: owasp.org, cisecurity.org.",
],
  "software engineer": [
  "Learn core programming fundamentals in one or more languages (e.g., Python, Java, C++). Master variables, data types, loops, conditionals, and functions. Understand debugging and error handling. Start with small coding exercises to build problem-solving skills. Time: 4-6 weeks. Resource: freeCodeCamp, W3Schools.",
  "Understand object-oriented programming (OOP) and other paradigms. Learn about classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Explore functional programming basics like higher-order functions and immutability. Time: 3-4 weeks. Resource: GeeksforGeeks OOP Tutorial, Refactoring Guru.",
  "Master data structures and algorithms. Learn arrays, linked lists, stacks, queues, hash tables, trees, graphs, and sorting/search algorithms. Practice complexity analysis (Big O notation) to write efficient code. Time: 6-8 weeks. Resource: LeetCode, HackerRank, CS50.",
  "Learn version control systems like Git. Understand branching, merging, pull requests, and resolving conflicts. Learn how to use GitHub or GitLab for collaborative development. Time: 1-2 weeks. Resource: Git Docs, GitHub Learning Lab.",
  "Understand software development methodologies. Learn Agile, Scrum, and Kanban principles. Understand the software development lifecycle (SDLC) and best practices for planning, building, testing, and deploying software. Time: 2-3 weeks. Resource: Agile Alliance, Scrum.org.",
  "Practice building full projects from scratch. Combine frontend, backend, and database skills to create complete applications. Learn how to write clean, maintainable code and document it properly. Time: 6-8 weeks. Resource: The Odin Project, Fullstackopen.com.",
  "Learn software testing and quality assurance. Understand unit testing, integration testing, and automated testing tools. Learn Test-Driven Development (TDD) principles to ensure software reliability. Time: 3-4 weeks. Resource: Jest Docs, Mocha Docs, PyTest Docs.",
  "Improve problem-solving and system design skills. Learn how to break down complex problems into smaller tasks. Understand system architecture, scalability, and design patterns. Time: 4-6 weeks. Resource: System Design Primer on GitHub, Design Patterns by Gamma et al.",
],
  "software developer": [
  "Learn core programming fundamentals in one or more languages (e.g., Python, Java, C++). Master variables, data types, loops, conditionals, and functions. Understand debugging and error handling. Start with small coding exercises to build problem-solving skills. Time: 4-6 weeks. Resource: freeCodeCamp, W3Schools.",
  "Understand object-oriented programming (OOP) and other paradigms. Learn about classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Explore functional programming basics like higher-order functions and immutability. Time: 3-4 weeks. Resource: GeeksforGeeks OOP Tutorial, Refactoring Guru.",
  "Master data structures and algorithms. Learn arrays, linked lists, stacks, queues, hash tables, trees, graphs, and sorting/search algorithms. Practice complexity analysis (Big O notation) to write efficient code. Time: 6-8 weeks. Resource: LeetCode, HackerRank, CS50.",
  "Learn version control systems like Git. Understand branching, merging, pull requests, and resolving conflicts. Learn how to use GitHub or GitLab for collaborative development. Time: 1-2 weeks. Resource: Git Docs, GitHub Learning Lab.",
  "Understand software development methodologies. Learn Agile, Scrum, and Kanban principles. Understand the software development lifecycle (SDLC) and best practices for planning, building, testing, and deploying software. Time: 2-3 weeks. Resource: Agile Alliance, Scrum.org.",
  "Practice building full projects from scratch. Combine frontend, backend, and database skills to create complete applications. Learn how to write clean, maintainable code and document it properly. Time: 6-8 weeks. Resource: The Odin Project, Fullstackopen.com.",
  "Learn software testing and quality assurance. Understand unit testing, integration testing, and automated testing tools. Learn Test-Driven Development (TDD) principles to ensure software reliability. Time: 3-4 weeks. Resource: Jest Docs, Mocha Docs, PyTest Docs.",
  "Improve problem-solving and system design skills. Learn how to break down complex problems into smaller tasks. Understand system architecture, scalability, and design patterns. Time: 4-6 weeks. Resource: System Design Primer on GitHub, Design Patterns by Gamma et al.",
],
  cyber: [
  "Understand the CIA triad (Confidentiality, Integrity, Availability), types of cyber threats, and basic security principles. Study different attack vectors like phishing, malware, and ransomware. Time: 3-4 weeks. Resource: Cybrary, OWASP Top 10 Overview.",
  "Learn about TCP/IP, HTTP/HTTPS, DNS, firewalls, VPNs, and network topologies. Explore packet analysis tools like Wireshark to inspect network traffic. Time: 4-6 weeks. Resource: Cisco Networking Academy, Wireshark Docs.",
  "Learn how to secure Windows and Linux systems, configure permissions, and manage user accounts. Explore OS hardening techniques and secure shell (SSH) usage. Time: 3-5 weeks. Resource: Linux Journey, Microsoft Learn Security Fundamentals.",
  "Understand symmetric vs asymmetric encryption, hashing, and digital signatures. Explore SSL/TLS, public key infrastructure (PKI), and how encryption secures data in transit and at rest. Time: 3-4 weeks. Resource: Cryptography and Network Security by William Stallings, SSL.com Docs.",
  "Learn how to identify vulnerabilities using tools like Nmap, Metasploit, and Burp Suite. Practice ethical hacking in legal environments such as TryHackMe or HackTheBox. Time: 6-8 weeks. Resource: TryHackMe, Offensive Security Training.",
  "Learn about SQL injection, cross-site scripting (XSS), cross-site request forgery (CSRF), and other common vulnerabilities. Study the OWASP Top 10 in detail. Time: 3-5 weeks. Resource: OWASP.org, PortSwigger Web Security Academy.",
  "Understand how to monitor for intrusions, investigate breaches, and apply digital forensics. Study security event management (SIEM) tools like Splunk. Time: 4-6 weeks. Resource: Splunk Fundamentals, SANS DFIR Resources.",
  "Study cloud security, IoT security, and compliance frameworks like GDPR and ISO 27001. Learn about security certifications such as CompTIA Security+, CEH, and CISSP. Time: 6-8 weeks. Resource: CompTIA, ISC².",
],
business: [
  "Understand the role of a business analyst, key concepts like stakeholders, requirements gathering, and business processes. Time: 2-3 weeks. Resource: BABOK Guide, Coursera Business Analysis Fundamentals.",
  "Learn how to conduct interviews, workshops, surveys, and document analysis to gather clear and actionable requirements. Time: 3-4 weeks. Resource: Modern Analyst Tutorials, IIBA Resources.",
  "Learn how to create flowcharts, BPMN diagrams, and use tools like Microsoft Visio or Lucidchart to visualize business processes. Time: 3-4 weeks. Resource: Lucidchart Tutorials, BPMN Guide.",
  "Develop strong communication and stakeholder management skills. Practice writing clear reports, creating presentations, and managing conflicting stakeholder needs effectively. Time: 2-3 weeks. Resource: MindTools Communication Skills, Toastmasters.",
  "Understand how to interpret data, use Excel or Google Sheets for analysis, and create dashboards to support decision making. Time: 3-4 weeks. Resource: Excel Jet, DataCamp Intro to Data Analysis.",
  "Familiarize with business intelligence tools and software. Get hands-on experience with tools like Tableau, Power BI, or Google Data Studio to visualize data insights. Time: 4-5 weeks. Resource: Tableau Public Training, Microsoft Power BI Docs.",
  "Learn how business analysts work in Agile teams, manage user stories, and support product owners. Time: 3-4 weeks. Resource: Scrum.org, Agile Alliance.",
  "Work on sample business cases, write requirement documents, and collaborate with teams to simulate business analysis tasks. Time: 4-6 weeks. Resource: BA Times Case Studies, Project Management Institute (PMI).",
],
ai: [
  "Study linear algebra, calculus, probability, and statistics, which are essential for understanding AI algorithms. Time: 4-6 weeks. Resource: Khan Academy Math, 3Blue1Brown videos.",
  "Focus on Python due to its rich AI ecosystem, and explore libraries like NumPy, Pandas, and Matplotlib for data manipulation and visualization. Time: 3-4 weeks. Resource: Python.org, Real Python Tutorials.",
  "Understand supervised, unsupervised, and reinforcement learning. Learn algorithms like linear regression, decision trees, clustering, and neural networks. Time: 6-8 weeks. Resource: Coursera Machine Learning by Andrew Ng, fast.ai.",
  "Study architectures like CNNs, RNNs, and transformers. Practice building models using frameworks like TensorFlow and PyTorch. Time: 6-8 weeks. Resource: TensorFlow Tutorials, PyTorch Documentation.",
  "Learn techniques for cleaning data, handling missing values, and transforming features to improve model performance. Time: 3-4 weeks. Resource: Kaggle Learn, DataCamp.",
  "Build projects like image classifiers, chatbots, or recommendation systems to apply your skills practically. Time: 4-6 weeks. Resource: Kaggle Competitions, GitHub Project Repositories.",
  "Understand REST APIs, containerization with Docker, and cloud platforms like AWS, GCP, or Azure for hosting AI models. Time: 3-4 weeks. Resource: AWS AI Services Docs, Docker Tutorials.",
  "Study fairness, bias, privacy issues, and stay updated with papers from conferences like NeurIPS and ICML. Time: Continuous. Resource: AI Ethics Guidelines by IEEE, arXiv.org.",
],
web: [
  "Learn HTML fundamentals to create the structure of webpages. Study semantic tags, forms, and accessibility basics. Practice building simple static pages. Time: 2-3 weeks. Resource: MDN Web Docs HTML, w3Schools HTML Tutorial.",
  "Understand selectors, box model, flexbox, grid, and responsive design with media queries. Practice creating layouts that work on all devices. Time: 3-4 weeks. Resource: CSS-Tricks, MDN CSS Guide.",
  "Get comfortable with JavaScript for frontend interactivity. Learn ES6+ features, DOM manipulation, event handling, and asynchronous programming. Time: 4-5 weeks. Resource: JavaScript.info, Eloquent JavaScript.",
  "Learn a frontend framework like React, Vue, or Angular. Understand components, state management, routing, and hooks (if React). Build small projects to reinforce concepts. Time: 5-6 weeks. Resource: React Official Docs, Vuejs.org.",
  "Learn server-side programming with Node.js or another language, create APIs, and handle database integration. Time: 5-6 weeks. Resource: Node.js Docs, Express.js Guide.",
  "Work with databases. Learn both relational (MySQL, PostgreSQL) and non-relational (MongoDB) databases. Practice CRUD operations and data modeling. Time: 3-4 weeks. Resource: MongoDB University, SQLBolt.",
  "Learn version control with Git, hosting with services like Netlify, Vercel, or Heroku, and continuous integration basics. Time: 2-3 weeks. Resource: GitHub Docs, Netlify Tutorials.",
  "Learn about optimization techniques, caching, HTTPS, authentication, and common vulnerabilities (OWASP). Time: 3-4 weeks. Resource: web.dev, OWASP Top 10.",
],
full: [
  "Frontend fundamentals: HTML, CSS, and JavaScript. Build responsive, accessible web pages and understand DOM manipulation and event handling. Time: 4-6 weeks. Resource: MDN Web Docs, freeCodeCamp.",
  "Choose one frontend framework/library like React, Vue, or Angular. Focus on components, state management, routing, and hooks (React). Build interactive user interfaces. Time: 6-8 weeks. Resource: React Docs, Vue.js Guide.",
  "Understand backend development - Node.js and Express.js (or any other backend language). Learn to build RESTful APIs, handle routing, and middleware. Time: 5-6 weeks. Resource: Node.js Docs, Express.js Guide.",
  "Get comfortable with databases: both relational (PostgreSQL, MySQL) and NoSQL (MongoDB). Learn schema design, querying, and ORM tools like Sequelize or Mongoose. Time: 4-5 weeks. Resource: MongoDB University, SQLBolt.",
  "Learn about sessions, JWT, OAuth, and secure password storage. Understand best security practices. Time: 3-4 weeks. Resource: Auth0 Docs, OWASP Authentication Cheat Sheet.",
  "Get familiar with cloud services (AWS, Heroku, Vercel), containerization with Docker, and CI/CD pipelines. Time: 3-4 weeks. Resource: AWS Free Tier, Docker Docs.",
  "Build complete applications integrating frontend, backend, and databases. Use Git for version control and host projects publicly. Time: 6-8 weeks. Resource: The Odin Project, Fullstackopen.com.",
  "Learn testing frameworks (Jest, Mocha), code optimization, debugging, and monitoring tools. Understand scalable architecture principles. Time: 4-5 weeks. Resource: Jest Docs, web.dev Performance Guide.",
],
ui: [
  "Study color theory, typography, spacing, and layout basics to create visually appealing interfaces. Time: 3-4 weeks. Resource: The Interaction Design Foundation, Canva Design School.",
  "Learn about buttons, forms, navigation, cards, and modals, and how to use them consistently. Time: 3-4 weeks. Resource: Material Design Guidelines, Nielsen Norman Group Articles.",
  "Master software like Figma, Adobe XD, or Sketch for creating wireframes, prototypes, and mockups. Practice designing simple screens and interactive flows. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Learn user research methods, personas, user journeys, and usability testing to design with the user in mind. Time: 3-4 weeks. Resource: UX Design CC, Nielsen Norman Group.",
  "Start with low-fidelity wireframes and gradually build high-fidelity prototypes with interactive elements. Time: 3-4 weeks. Resource: InVision Tutorials, Figma Community.",
  "Understand how to design for diverse users, including color contrast, keyboard navigation, and screen reader compatibility. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Learn to hand off designs with proper specifications and assets. Understand design systems and version control for design files. Time: 2-3 weeks. Resource: Zeplin Docs, Figma Handoff Guide.",
  "Create a collection of projects showcasing your design process, problem-solving, and final UI designs. Get feedback and iterate on your work. Time: 4-6 weeks. Resource: Behance, Dribbble.",
],
ux: [
  "Understand the difference between UX and UI, key concepts like usability, accessibility, and user-centered design. Time: 2-3 weeks. Resource: Nielsen Norman Group, Interaction Design Foundation.",
  "Learn how to conduct interviews, surveys, and usability testing to gather user needs and pain points. Time: 3-4 weeks. Resource: UX Research by Nielsen Norman Group, Coursera UX Research.",
  "Create detailed personas and map user flows to identify friction points and opportunities. Time: 3-4 weeks. Resource: UX Design CC, Smashing Magazine.",
  "Use tools like Figma, Adobe XD, or Sketch to build low and high-fidelity prototypes for testing and iteration. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Conduct tests with real users, gather feedback, and analyze results to improve designs. Time: 3-4 weeks. Resource: Usability.gov, MeasuringU.",
  "Organize content effectively and design intuitive navigation and interactions. Time: 3-4 weeks. Resource: UXBooth, The Interaction Design Foundation.",
  "Learn standards to ensure your designs are usable by people with disabilities. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Build a UX portfolio showcasing your process. Include case studies with research, wireframes, prototypes, and user feedback to demonstrate your skills. Time: 4-6 weeks. Resource: Behance, Dribbble UX Collections.",
],
uiux: [
  "Learn design fundamentals covering both UI and UX principles. Study color theory, typography, layout, usability, accessibility, and user-centered design. Time: 3-4 weeks. Resource: Interaction Design Foundation, The Design of Everyday Things by Don Norman.",
  "Learn to conduct interviews, surveys, and usability tests to gather user needs and analyze pain points. Time: 3-4 weeks. Resource: Nielsen Norman Group UX Research, Coursera UX Design.",
  "Use tools like Figma, Adobe XD, or Sketch to create wireframes and interactive prototypes for testing design ideas. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Learn about UI components, design systems, consistency, and interactive design patterns. Practice creating polished visual designs. Time: 3-4 weeks. Resource: Material Design Guidelines, Dribbble.",
  "Organize content effectively and design intuitive user flows and navigation. Time: 3-4 weeks. Resource: UXBooth, The Interaction Design Foundation.",
  "Ensure your designs are usable by people with disabilities by following standards and guidelines. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Learn design handoff, documentation, and version control using tools like Zeplin and Figma. Time: 2-3 weeks. Resource: Zeplin Docs, Figma Handoff Guide.",
  "Showcase your end-to-end design process with case studies, including research, wireframes, prototypes, visual designs, and user feedback. Time: 4-6 weeks. Resource: Behance, Dribbble.",
],
cloud: [
  "Learn the core concepts of IaaS, PaaS, SaaS, and cloud deployment models (public, private, hybrid). Time: 2-3 weeks. Resource: AWS Cloud Practitioner Essentials, Microsoft Learn Cloud Fundamentals.",
  "Explore AWS, Microsoft Azure, and Google Cloud Platform services and interfaces. Time: 4-6 weeks. Resource: AWS Free Tier, Azure Fundamentals, Google Cloud Training.",
  "Understand how to create and manage VMs and use Docker for containerizing applications. Time: 3-4 weeks. Resource: Docker Docs, Microsoft Learn Containers.",
  "Study VPCs, subnets, routing, load balancing, and DNS management in cloud environments. Time: 3-4 weeks. Resource: AWS Networking Docs, Azure Networking Tutorials.",
  "Learn about object storage, block storage, and managed database services in the cloud. Time: 3-4 weeks. Resource: AWS S3 Docs, Google Cloud Storage Docs.",
  "Get hands-on with tools like Terraform, CloudFormation, or Azure Resource Manager for automated deployments. Time: 4-5 weeks. Resource: Terraform Docs, AWS CloudFormation Tutorials.",
  "Study identity and access management (IAM), encryption, monitoring, and compliance standards like GDPR and HIPAA. Time: 3-4 weeks. Resource: AWS Security Docs, CIS Cloud Benchmarks.",
  "Build real projects, implement CI/CD pipelines, and monitor cloud resources for performance and cost. Time: 5-6 weeks. Resource: Cloud Academy, A Cloud Guru.",
],
solution: [
  "Learn architectural patterns, design principles (SOLID, DRY), and system components. Time: 3-4 weeks. Resource: 'Clean Architecture' by Robert C. Martin, Software Architecture Fundamentals videos.",
  "Explore AWS, Azure, or Google Cloud, focusing on core services and how to architect scalable, reliable systems. Time: 4-6 weeks. Resource: AWS Solutions Architect Certification, Microsoft Azure Architect Docs.",
  "Study load balancing, caching strategies, database sharding, and microservices architecture. Time: 5-6 weeks. Resource: 'Designing Data-Intensive Applications' by Martin Kleppmann, System Design Primer GitHub.",
  "Understand REST, GraphQL, messaging queues, event-driven architecture, and service orchestration. Time: 3-4 weeks. Resource: Microsoft Docs on API Design, Enterprise Integration Patterns book.",
  "Learn identity management, authentication, authorization, data encryption, and compliance frameworks. Time: 3-4 weeks. Resource: OWASP, CISSP Study Guides.",
  "Get hands-on with CI/CD pipelines, container orchestration (Kubernetes), and Infrastructure as Code (Terraform, CloudFormation). Time: 4-5 weeks. Resource: Kubernetes Docs, HashiCorp Terraform Tutorials.",
  "Learn to create architecture diagrams, write clear documentation, and present solutions to stakeholders. Time: 2-3 weeks. Resource: C4 Model Docs, Structurizr.",
  "Design end-to-end systems solving complex business problems, focusing on performance, scalability, and maintainability. Time: 6-8 weeks. Resource: Case studies on AWS Architecture Center, GitHub projects.",
],
project: [
  "Understand project life cycles, methodologies (Waterfall, Agile, Scrum), and key terminology. Time: 3-4 weeks. Resource: PMBOK Guide, 'Project Management for Dummies'.",
  "Learn how to define scope, set objectives, create work breakdown structures (WBS), and develop timelines. Time: 3-4 weeks. Resource: Wrike Project Planning Guide, Smartsheet Tutorials.",
  "Understand Gantt charts, critical path method (CPM), resource allocation, and cost estimation. Time: 3-4 weeks. Resource: Microsoft Project Tutorials, Coursera Project Scheduling Course.",
  "Learn conflict resolution, negotiation, team motivation, and stakeholder management. Time: 2-3 weeks. Resource: 'Crucial Conversations' by Patterson et al., Harvard Business Review articles.",
  "Learn to identify, assess, and mitigate project risks, as well as create contingency plans. Time: 2-3 weeks. Resource: PMI Risk Management Professional (PMI-RMP) resources.",
  "Use tools like Jira, Trello, and Asana to track deliverables, manage dependencies, and report progress. Time: 2-3 weeks. Resource: Atlassian Jira Tutorials, Asana Academy.",
  "Understand QA processes, testing strategies, and continuous improvement practices. Time: 2-3 weeks. Resource: ISO 9001 Quality Management Guides, QA tutorials.",
  "Manage a mock project from initiation to closure, applying all learned skills in planning, execution, and delivery. Time: 4-6 weeks. Resource: Capstone projects on Coursera, PMI case studies.",
],
"data engineer": [
  "Master programming languages used in data engineering like Python or Java. Learn SQL to query, manipulate, and analyze structured data in relational databases. Focus on writing efficient queries, joins, aggregations, and data transformations. Time: 3-4 weeks. Resource: learn python, w3 school sql.",
  "Learn how to design, build, and manage data warehouses. Understand ETL (Extract, Transform, Load) processes to move data from source systems into a warehouse. Study data modeling concepts like star and snowflake schemas. Time: 3-4 weeks. Resource: redshift.aws",
  "Get familiar with big data frameworks like Hadoop and Spark for processing large-scale datasets. Learn distributed computing principles, batch processing, and real-time streaming concepts. Time: 3-4 weeks. Resource: spark.apache.org, hadoop.apache.org.",
  "Understand different types of data storage, including relational (PostgreSQL, MySQL) and NoSQL databases (MongoDB, Cassandra). Learn when to use each type and how to design scalable, high-performance storage solutions. Time: 3-4 weeks. Resource: mongodb.com for learn, postgresql.org.",
  "Learn tools like Apache Airflow or Luigi to automate and schedule data pipelines. Understand dependency management, task scheduling, monitoring, and error handling to maintain reliable workflows. Time: 3-4 weeks. Resource: airflow.apache.org, luigi.readthedocs.io.",
  "Learn cloud platforms like AWS, Azure, or GCP and their data engineering services (e.g., AWS Redshift, Azure Data Factory, GCP BigQuery). Practice deploying scalable data pipelines and managing cloud-based storage and analytics solutions. Time: 3-4 weeks. Resource: aws.amazon.com for training, azure.microsoft.com.",
  "Understand best practices for data quality, validation, and cleansing. Learn about data governance, privacy regulations, and security measures to protect sensitive data and ensure compliance. Time: 3-4 weeks. Resource: dataversity.net, oreilly.com.",
  "Apply your skills by building real-world projects like ETL pipelines, data warehouses, streaming data apps, and analytics dashboards. Document your architecture, pipelines, and design decisions to showcase your portfolio to employers. Time: 4-6 weeks. Resource: kaggle, github"
],
android: [
  "Android apps are primarily built using Java or Kotlin. Learn the basics of programming, including variables, data types, loops, functions, and object-oriented programming concepts. Kotlin is now the preferred language for Android development, so focus on its modern features like null safety, coroutines, and extension functions. Time: 3-4 weeks. Resource: kotlinlang.org, learnjavaonline.org.",
  "Learn about Android app components like Activities, Fragments, Services, Broadcast Receivers, and Content Providers. Understand the Android app lifecycle, UI components (Views, Layouts), and how to handle user input. Time: 3-4 weeks. Resource: developer.android.com.",
  "Understand how to create intuitive and responsive Android interfaces. Learn about XML layouts, RecyclerView, ConstraintLayout, and Android widgets. Follow Material Design principles to ensure apps are visually consistent and user-friendly. Time: 3-4 weeks. Resource: material.io.",
  "Learn how to store and manage data in Android apps. Explore SharedPreferences, SQLite, Room Database, and how to interact with local and remote databases. Understand data persistence and best practices for handling large datasets. Time: 3-4 weeks. Resource: developer.android.com.",
  "Understand how to connect Android apps to the internet. Learn to fetch and send data using REST APIs, JSON parsing, and libraries like Retrofit or Volley. Handle network operations asynchronously to avoid blocking the main thread. Time: 3-4 weeks. Resource: square.github.io, developer.android.com.",
  "Learn best practices for structuring Android apps using architectural patterns like MVVM (Model-View-ViewModel) or MVP. Understand ViewModel, LiveData, and data binding to build maintainable and testable applications. Time: 3-4 weeks. Resource: developer.android.com, kotlinlang.org",
  "Learn advanced Android topics like Kotlin coroutines for asynchronous programming, Jetpack libraries for navigation, paging, and WorkManager. Practice unit testing and UI testing to ensure app quality. Time: 3-4 weeks. Resource: kotlinlang.org, developer.android.com.",
  "Apply your skills by building real-world projects like To-Do apps, e-commerce apps, or social media apps. Deploy your apps on Google Play Store. Document your work on GitHub or a personal portfolio to showcase your Android development skills. Time: 3-4 weeks. Resource: github.com, developer.android.com."
],
ios: [
  "Swift is the primary language for iOS development. Learn the basics including variables, data types, control flow, functions, and object-oriented programming. Focus on Swift-specific features like optionals, closures, protocols, and error handling. Time: 3-4 weeks. Resource: developer.apple.com, learnswift.org.",
  "Learn to use Xcode, the official IDE for iOS development. Understand iOS app architecture, the app lifecycle, and key components like ViewControllers, Storyboards, and SwiftUI Views. Explore how apps handle user input and manage app states. Time: 3-4 weeks. Resource: developer.apple.com.",
  "Learn how to build intuitive and responsive iOS interfaces using SwiftUI or UIKit. Understand layout systems, Auto Layout, navigation, and best practices for creating user-friendly designs that follow Apple’s Human Interface Guidelines. Time: 3-4 weeks. Resource: developer.apple.com.",
  "Learn to store and manage data in iOS apps. Explore UserDefaults, file storage, and Core Data for local persistence. Understand how to interact with remote databases via APIs and ensure data consistency and security. Time: 2-3 weeks. Resource: developer.apple.com.",
  "Understand how to connect iOS apps to the internet. Learn to fetch and send data using REST APIs and JSON parsing. Explore libraries like URLSession, Alamofire, and techniques for handling asynchronous network operations. Time: 3-4 weeks. Resource: developer.apple.com.",
  "Learn architectural patterns for building maintainable and testable iOS apps, like MVVM (Model-View-ViewModel) or MVC. Understand data binding, dependency injection, and managing app state effectively. Time: 3-4 weeks. Resource: developer.apple.com, raywenderlich.com.",
  "Learn advanced topics like Swift Concurrency, Combine framework, animations, and notifications. Practice unit testing and UI testing using XCTest to ensure app reliability and maintainability. Time: 3-4 weeks. Resource: developer.apple.com.",
  "Practice iOS interview questions, coding challenges, and system design for mobile apps. Stay updated on new Swift features, iOS SDK updates, and best practices. Simulate real-world app development scenarios to strengthen problem-solving skills. Time: 3-4 weeks. Resource: developer.apple.com."
],
"qa engineer": [
  "Understand the basics of software testing, including types of testing (manual vs. automated), test levels (unit, integration, system, acceptance), and key testing principles. Learn about test planning, test cases, and defect lifecycle. Time: 3-4 weeks. Resource: guru99.com, softwaretestinghelp.com.",
  "Learn how to perform manual testing effectively. Practice writing test cases, executing test plans, logging defects, and performing exploratory testing. Understand the importance of requirement analysis and test documentation. Time: 2-3 weeks. Resource: guru99.com, softwaretestinghelp.com.",
  "Understand the fundamentals of automation testing, including when to automate, types of automation frameworks, and scripting basics. Get familiar with popular tools like Selenium, Cypress, or Playwright. Time: 3-4 weeks. Resource: guru99.com, softwaretestinghelp.com.",
  "Dive deeper into automation frameworks. Learn to create reusable scripts, implement Page Object Model, use test runners, and generate test reports. Explore continuous integration (CI) tools for automated test execution. Time: 3-4 weeks. Resource: cypress.io, playwright.dev.",
  "Understand how to test backend APIs using tools like Postman or RestAssured. Learn about HTTP methods, request/response validation, authentication, and API test automation. Time: 3-4 weeks. Resource: postman.com, rest-assured.io.",
  "Learn the basics of performance testing (load, stress, scalability) and security testing. Use tools like JMeter for performance testing and understand common vulnerabilities for security testing. Time: 3-4 weeks. Resource: jmeter.apache.org.",
  "Learn the basics of Git for version control and understand how QA integrates into CI/CD pipelines. Practice automated testing in CI/CD environments for faster feedback loops. Time: 3-4 weeks. Resource: jenkins.io, git-scm.com.",
  "Apply your skills by testing real or sample applications. Document your test plans, test cases, automated scripts, and defect reports. Showcase your QA projects in a portfolio or GitHub repository to demonstrate practical skills. Time: 3-4 weeks. Resource: guru99.com, github.com."
],
blockchain: [
  "Master a programming language commonly used in blockchain development, such as JavaScript, Python, or Solidity. Focus on basic syntax, data structures, algorithms, and object-oriented programming to build a strong foundation. Time: 3-4 weeks. Resource: learnpython, javascript.info, soliditylang.org.",
  "Learn what blockchain is, how it works, and key concepts like decentralization, consensus mechanisms (Proof of Work, Proof of Stake), cryptography, hashing, and distributed ledger technology. Time: 2-3 weeks. Resource: blockchain.com, ibm.com.",
  "Focus on Ethereum blockchain and learn to write smart contracts using Solidity. Understand Ethereum Virtual Machine (EVM), gas fees, and deployment of contracts on test networks. Time: 2-3 weeks. Resource: ethereum.org, soliditylang.org.",
  "Learn how to build DApps that interact with smart contracts. Understand frontend-backend integration, using Web3.js or Ethers.js to connect the blockchain with web interfaces. Time: 3-4 weeks. Resource: web3js.readthedocs.io, docs.ethers.io.",
  "Explore different blockchain platforms like Binance Smart Chain, Polkadot, Solana, and Hyperledger. Learn to use tools like Truffle, Hardhat, Ganache, and Remix for development and testing. Time: 3-4 weeeks. Resource: trufflesuite.com, hardhat.org.",
  "Learn about ERC-20 and ERC-721 token standards, NFTs, and decentralized finance (DeFi) protocols. Understand token creation, smart contract interactions, and DeFi concepts like staking and lending. Time: 3-4 weeks. Resource: ethereum.org, coindesk.com.",
  "Study blockchain security, common vulnerabilities in smart contracts, and best practices for writing secure code. Learn about audits, testing contracts, and handling private keys safely. Time: 2-3 weeks. Resource: consensys.github.io, swcregistry.io.",
  "Apply your skills by creating projects like token contracts, NFT marketplaces, DeFi apps, or supply chain solutions. Deploy on testnets and document your work in a portfolio to showcase practical blockchain development experience. Time: 3-4 weeks. Resource: dappuniversity.com, github.com."
],
"software architect": [
  "Build strong programming skills in languages like Java, C#, Python, or JavaScript. Learn object-oriented programming, data structures, algorithms, and design patterns to understand how software components interact and how to write maintainable code. Time: 4-6 weeks. Resource: geeksforgeeks.org, refactoring.guru.",
  "Understand core software architecture concepts like modularity, scalability, maintainability, performance, and security. Learn about different architectural styles such as layered, microservices, event-driven, and service-oriented architectures. Time: 4-6 weeks. Resource: martinfowler.com, oreilly.com.",
  "Learn how to design large-scale systems including databases, APIs, caching, load balancing, and distributed systems. Study system design concepts like high availability, fault tolerance, and consistency models. Time: 4-6 weeks. Resource: educative.io, github.com.",
  "Gain knowledge of cloud platforms like AWS, Azure, or Google Cloud. Understand cloud services, serverless architecture, containerization (Docker), and orchestration (Kubernetes) for building scalable and reliable systems. Time: 3-4 weeks. Resource: aws.amazon.com, kubernetes.io.",
  "Learn to design and implement microservices architecture. Understand RESTful APIs, GraphQL, API versioning, authentication, and communication between services using messaging queues or event-driven patterns. Time: 4-5 weeks. Resource: microservices.io, graphql.org.",
  "Study software security best practices, secure coding, and threat modeling. Understand performance optimization techniques, monitoring, logging, and designing fault-tolerant systems for high availability. Time: 4-5 weeks. Resource: owasp.org, martinfowler.com.",
  "Apply your knowledge by designing full-scale projects, creating system diagrams, and documenting architectural decisions. Showcase projects demonstrating layered architecture, microservices, cloud integration, and scalable solutions. Time: 4-5 weeks. Resource: github.com, draw.io.",
  "Practice system design interviews, coding challenges, and architecture problem-solving. Stay updated with new architectural patterns, frameworks, and technologies to continuously refine your skills. Time: continuous. Resource: educative.io, interviewbit.com."
],
game: [
  "Master a programming language commonly used in game development, such as C++, C#, or Python. Focus on variables, data types, control flow, functions, and object-oriented programming concepts to build a strong foundation for game logic. Time: 3-4 weeks. Resource: learncpp.com, learnpython.org.",
  "Learn the basics of game development, including game loops, physics, collision detection, input handling, and rendering. Understand the components of a game engine and how they interact to create interactive experiences. Time: 3-4 weeks. Resource: unity.com, unrealengine.com.",
  "Pick a popular game engine like Unity (C#) or Unreal Engine (C++/Blueprints). Learn to create scenes, manage assets, use prefabs, implement animations, and work with physics and AI components. Time: 4-6 weeks. Resource: unity.com, unrealengine.com.",
  "Understand the math behind games, including vectors, matrices, transformations, and basic physics for motion, collisions, and forces. Learn how these concepts are applied in 2D and 3D games. Time: 4-5 weeks. Resource: gamedevbeginner.com, khanacademy.org.",
  "Learn about rendering pipelines, shaders, lighting, textures, and materials. Explore 2D and 3D graphics, sprite animation, particle systems, and optimization techniques for better performance. Time: 3-4 weeks. Resource: learnopengl.com, docs.unity3d.com.",
  "Learn how to implement game AI for enemy behavior, pathfinding, decision-making, and NPC interactions. Understand game mechanics, progression systems, and player feedback loops. Time: 4-5 weeks. Resource: redblobgames.com, unity.com.",
  "Learn how to implement multiplayer features, client-server communication, matchmaking, and real-time synchronization. Understand networking concepts specific to games and latency optimization. Time: 2-3 weeks. Resource: docs.unity3d.com, docs.unrealengine.com.",
  "Apply your knowledge by creating real games, from small 2D games to more complex 3D projects. Deploy your games on platforms like Steam, mobile stores, or itch.io. Document your projects in a portfolio to showcase your skills. Time: 5-8 weeks. Resource: itch.io, github.com."
],
it: [
  "Understand the basics of computer hardware components such as CPU, RAM, storage devices, and motherboards. Learn to install, configure, and troubleshoot operating systems like Windows, Linux, and macOS. Time: 3-4 weeks. Resource: comptia.org, linuxjourney.com.",
  "Learn basic networking concepts, including IP addressing, DNS, DHCP, LAN/WAN, routers, switches, and Wi-Fi configuration. Understand how devices communicate in a network and how to troubleshoot connectivity issues. Time: 3-4 weeks. Resource: cisco.com, netacad.com.",
  "Get familiar with IT support tools like remote desktop software, ticketing systems, and diagnostic utilities. Practice troubleshooting hardware, software, and network issues methodically. Time: 2-3 weeks. Resource: spiceworks.com, comptia.org.",
  "Learn how to manage user accounts, permissions, system updates, and backups on Windows, Linux, and macOS. Understand how to configure system services and automate administrative tasks using scripts. Time: 3-4 weeks. Resource: linuxcommand.org, docs.microsoft.com.",
  "Learn the basics of IT security, including antivirus management, firewalls, malware prevention, and safe computing practices. Understand access control and data protection measures to maintain system integrity. Time: 3-4 weeks. Resource: cisco.com, sans.org.",
  "Understand cloud computing concepts, including SaaS, PaaS, and IaaS. Learn basic virtualization using tools like VMware or VirtualBox to create and manage virtual machines for testing and deployment. Time: 2-3 weeks. Resource: aws.amazon.com, /www.vmware.com.",
  "Apply your knowledge by solving real-world IT problems, setting up networks, configuring devices, and assisting users. Use ticketing systems to simulate helpdesk scenarios and improve problem-solving skills. Time: 4-5 weeks. Resource: comptia.org, learn.microsoft.com.",
  "Document your troubleshooting projects, network setups, and IT tasks in a portfolio. Consider certifications like CompTIA A+, Network+, or Microsoft Certified: Modern Desktop Administrator to demonstrate your skills to employers. Time: 5-6 weeks. Resource: learn.microsoft.com, spiceworks.com."
],
network: [
  "Understand the basics of computer networks, including the OSI and TCP/IP models, IP addressing, subnetting, routing, and switching. Learn how data travels across networks and the principles behind network communication. Time: 3-4 weeks. Resource: cisco.com, netacad.com.",
  "Learn how routers and switches work and how to configure them. Understand VLANs, inter-VLAN routing, static and dynamic routing protocols like OSPF, EIGRP, and BGP. Time: 3-4 weeks. Resource: cisco.com, networklessons.com.",
  "Gain knowledge of essential network protocols such as DHCP, DNS, HTTP/HTTPS, FTP, and SMTP. Understand how these protocols function and how to troubleshoot related network issues. Time: 2-3 weeks. Resource: cloudflare.com, cisco.com.",
  "Learn the basics of network security, including firewalls, VPNs, intrusion detection/prevention systems (IDS/IPS), access control lists (ACLs), and security best practices to protect network infrastructure. Time: 3-4 weeks. Resource: cisco.com, sans.org.",
  "Practice configuring routers, switches, VLANs, and firewalls using simulators like Cisco Packet Tracer, GNS3, or physical lab equipment. Apply troubleshooting techniques and document your work for better understanding. Time: 2-3 weeks. Resource: netacad.com, gns3.com.",
  "Understand wireless networking concepts, Wi-Fi standards, and security. Learn cloud networking basics and services from providers like AWS, Azure, and Google Cloud. Time: 2-3 weeks. Resource: aws.amazon.com, learn.microsoft.com.",
  "Learn tools and techniques for monitoring, analyzing, and troubleshooting networks. Use tools like Wireshark, Nagios, PRTG, and SolarWinds to ensure network performance and reliability. Time: 3-4 weeks. Resource: wireshark.org, paessler.com.",
  "Apply your networking knowledge to real-world scenarios, like designing LAN/WAN networks, implementing VLANs, and configuring secure remote access. Document your projects in a portfolio to showcase practical skills. Time: 3-4 weeks. Resource: packetlife.net, github.com."
],
system: [
    "Learn about computer architecture, operating systems, and basic hardware components. Understand CPU, memory, storage, and peripheral devices. Time: 3-4 weeks. Resource: Computer Architecture Books, OS Tutorials.",
    "Understand networking fundamentals including TCP/IP, DHCP, DNS, routing, and switching. Learn about LAN/WAN, VLANs, and VPNs. Time: 4-6 weeks. Resource: Cisco Networking Academy, NetworkLessons.com.",
    "Learn system administration for Windows and Linux. Practice installing, configuring, and managing OS services, permissions, and users. Time: 4-6 weeks. Resource: Microsoft Learn, Linux Journey, Linux Academy.",
    "Study virtualization and containerization technologies like VMware, Hyper-V, and Docker. Understand resource allocation and deployment of virtual machines. Time: 3-5 weeks. Resource: VMware Docs, Docker Docs.",
    "Learn about server monitoring, performance tuning, and troubleshooting techniques. Understand logs, alerts, and system health checks. Time: 3-4 weeks. Resource: Nagios, Zabbix, Prometheus Documentation.",
    "Understand backup and recovery strategies, high availability setups, and disaster recovery planning. Learn about RAID, snapshots, and cloud backups. Time: 3-5 weeks. Resource: Veeam Docs, Microsoft Azure Backup Guides.",
    "Explore cloud platforms such as AWS, Azure, or Google Cloud. Learn how to deploy, monitor, and manage systems in cloud environments. Time: 5-7 weeks. Resource: AWS Training, Microsoft Learn, Google Cloud Training.",
    "Study security best practices for systems, including user permissions, patch management, firewalls, and basic encryption. Learn how to harden systems for production. Time: 4-6 weeks. Resource: Microsoft Security Docs, Linux Security Guides."
  ]
};

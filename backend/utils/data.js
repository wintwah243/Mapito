export const roadmapDetails = {
  frontend: [
  "HTML is the skeleton of webpages. Learn tags, elements, and semantics. Understand the difference between block-level and inline elements. Learn how to use forms, input types, and semantic tags like <header>, <footer>, <article>. Practice creating simple pages without any styling first. Time: 3-4 weeks. Resource: w3Schools HTML Tutorial, MDN HTML Docs.",
  "CSS controls style and layout. Master flexbox, grids, and media queries. Learn about selectors, specificity, pseudo-classes, and pseudo-elements. Understand how to use transitions, animations, and custom properties (CSS variables). Practice making responsive designs that work on mobile and desktop. Time: 3-4 weeks. Resource: MDN CSS Guide, CSS Tricks.",
  "JavaScript powers interactivity. Focus on ES6+ features like promises, async/await, arrow functions, destructuring, and template literals. Learn DOM manipulation, event handling, and form validation. Understand how to work with arrays, objects, and JSON data. Time: 5-6 weeks. Resource: JavaScript.info, MDN JavaScript Docs.",
  "React, Vue, and Angular are popular frameworks for building UI. Start with React for reusable components, hooks, and state management. Learn about props, context API, and basic routing. Practice building small apps like to-do lists and calculators. Time: 6-8 weeks. Resource: React.dev, Vuejs.org, Angular.io.",
  "Build projects like portfolio sites to showcase your skills. Work on different project types: landing pages, dashboards, and e-commerce layouts. Use Git and GitHub for version control and learn how to deploy with services like Netlify or Vercel. Time: 3-4 weeks. Resource: Frontend Mentor, freeCodeCamp Projects.",
  "Practice common interview questions on frontend concepts and coding. Revise topics like closures, event bubbling, and responsive design patterns. Solve coding challenges to improve problem-solving speed. Time: Continuous. Resource: LeetCode, Frontend Interview Handbook, CSSBattle.",
  "Learn CSS frameworks and UI libraries to speed up development. Explore Bootstrap, Tailwind CSS, and Material UI. Understand how to customize components and themes to match branding. Practice building responsive layouts quickly using these tools. Time: 2-3 weeks. Resource: TailwindCSS.com, GetBootstrap.com, MUI.com.",
  "Master performance optimization and accessibility. Learn techniques to reduce page load time such as lazy loading, image compression, and code splitting. Understand Web Content Accessibility Guidelines (WCAG) to make sites usable for all users. Use browser developer tools to debug and optimize your frontend. Time: 3-4 weeks. Resource: web.dev, Lighthouse, A11y Project.",
],
  backend: [
  "Pick a backend language and learn its syntax and ecosystem deeply. Popular choices are Node.js (JavaScript), Python, Java, and Go. Learn about variables, loops, functions, error handling, and package management. Understand how to set up a local development environment. Time: 3-4 weeks. Resource: Node.js Docs, Python.org, Java Tutorials.",
  "Understand relational and non-relational databases and how to query them. Learn SQL basics such as SELECT, INSERT, UPDATE, DELETE, and JOIN for relational databases like MySQL or PostgreSQL. For NoSQL (MongoDB), learn collections, documents, and aggregation pipelines. Time: 3-4 weeks. Resource: MySQL Docs, MongoDB University.",
  "Learn how to create APIs that frontend can consume via REST or GraphQL. Understand HTTP methods (GET, POST, PUT, DELETE), status codes, and request/response cycles. Learn about routing, middleware, and controllers in your chosen backend framework. Time: 4-5 weeks. Resource: Express.js Docs, Apollo GraphQL Docs.",
  "Implement user authentication and secure your backend with best practices. Learn about sessions, cookies, JWT (JSON Web Tokens), password hashing (bcrypt), and OAuth for third-party logins. Understand HTTPS, CORS, and how to protect against SQL injection and XSS attacks. Time: 3-4 weeks. Resource: Auth0 Blog, OWASP Cheat Sheets.",
  "Explore scaling apps using load balancing, caching, and microservices. Learn about horizontal vs vertical scaling, database indexing, and CDN usage. Use caching systems like Redis or Memcached. Understand how to design microservices and communicate via message queues. Time: 4-6 weeks. Resource: Redis.io, AWS Architecture Blog.",
  "Integrate backend with cloud platforms for deployment. Learn how to use services like AWS, Google Cloud, or Azure. Understand server provisioning, CI/CD pipelines, and containerization with Docker. Time: 3-4 weeks. Resource: AWS Free Tier, Docker Docs.",
  "Implement backend testing to ensure reliability. Learn unit testing, integration testing, and end-to-end testing. Use frameworks like Jest, Mocha, or PyTest depending on your backend language. Understand test coverage and mocking. Time: 2-3 weeks. Resource: Jest Docs, Mocha Docs, PyTest Docs.",
  "Monitor, log, and maintain backend systems. Learn how to set up logging with tools like Winston or Log4j. Monitor performance and uptime using services like Prometheus, Grafana, or New Relic. Understand how to set up error tracking and alerting. Time: 2-3 weeks. Resource: Prometheus.io, Grafana.com.",
],
  data: [
  "Learn what data analysts do, types of data, and basic data workflows. Time: 1-2 weeks. Resource: 'Data Analytics Basics' by IBM on Coursera, freeCodeCamp articles.",
  "Learn formulas, pivot tables, VLOOKUP, charts, and basic data cleaning techniques. Time: 2-3 weeks. Resource: ExcelJet, Google's Analytics Academy.",
  "Understand how to retrieve, filter, group, and join data using SQL. Time: 2-3 weeks. Resource: Mode SQL Tutorial, Khan Academy SQL.",
  "Learn how to create charts, dashboards, and reports using tools like Tableau or Power BI. Time: 2-3 weeks. Resource: Tableau Public Training, Power BI Learning by Microsoft.",
  "Focus on libraries such as pandas, numpy, matplotlib, and seaborn for data analysis and visualization. Time: 3-4 weeks. Resource: Kaggle Python Course, DataCamp.",
  "Learn descriptive stats, inferential stats, hypothesis testing, and distributions. Time: 3-4 weeks. Resource: Khan Academy Statistics, 'Practical Statistics for Data Scientists'.",
  "Learn to handle missing data, outliers, and data transformation. Time: 2-3 weeks. Resource: Kaggle datasets, 'Data Wrangling with pandas'.",
  "Analyze public datasets, build dashboards, and present insights. Time: 4-6 weeks. Resource: Kaggle, GitHub, Google Data Analytics Capstone Project on Coursera.",
],
  mobile: [
  "Learn the difference between native, cross-platform, and hybrid development. Time: 1 week. Resource: freeCodeCamp article 'Mobile Development Overview', Google Developers Blog.",
  "Choose a development platform: Android (Java/Kotlin), iOS (Swift), or Cross-platform (React Native, Flutter). Time: 1 week. Resource: Medium articles comparing mobile frameworks, official docs.",
  "For React Native: JavaScript & React. For Flutter: Dart. For Android: Kotlin. Time: 2–4 weeks. Resource: ReactNative.dev, Dart.dev, developer.android.com.",
  "Practice UI development, user interaction, and basic app navigation. Time: 2–3 weeks. Resource: YouTube tutorials (e.g., CodeWithChris, Academind), official docs.",
  "Work with camera, location, storage, and local databases (SQLite, Realm). Time: 2 weeks. Resource: Expo Docs (React Native), Android/iOS API Docs.",
  "Learn how to use REST APIs, fetch data, and handle authentication. Time: 2–3 weeks. Resource: Postman tutorials, Firebase, Supabase, or custom Express APIs.",
  "Learn profiling, debugging, and writing unit/UI tests. Time: 2 weeks. Resource: React Native Testing Library, Flutter Testing Docs.",
  "Learn how to deploy to Play Store and App Store, manage updates, and gather user feedback. Time: 1–2 weeks. Resource: Google Play Console, App Store Connect, Dev.to publishing guides.",
],
  devops: [
  "Learn what DevOps is, its culture, and how it bridges development and operations. Time: 1-2 weeks. Resource: 'Introduction to DevOps' by IBM (Coursera), 'What is DevOps?' by Azure Docs.",
  "Understand branching, merging, pull requests, and GitHub workflows. Time: 1-2 weeks. Resource: GitHub Learning Lab, Atlassian Git Tutorials.",
  "Most DevOps work is done on Linux servers, so learn file systems, permissions, and bash scripting. Time: 2-3 weeks. Resource: LinuxCommand.org, 'The Linux Command Line' book.",
  "Understand Jenkins, GitHub Actions, GitLab CI/CD, and how to automate builds and tests. Time: 2-3 weeks. Resource: Jenkins Docs, GitHub Actions Docs.",
  "Learn how to build, run, and manage containers. Time: 2-3 weeks. Resource: Docker Official Docs, freeCodeCamp's Docker course.",
  "Understand pods, services, deployments, and Helm charts. Time: 3-4 weeks. Resource: Kubernetes.io tutorials, 'Kubernetes for Beginners' on YouTube.",
  "Choose AWS, Azure, or GCP and explore services like EC2, S3, IAM. Learn Terraform or AWS CloudFormation. Time: 4-6 weeks. Resource: AWS Free Tier, 'Learn Terraform' by HashiCorp.",
  "Use tools like Prometheus, Grafana, ELK Stack, and learn SRE practices. Time: 2-3 weeks. Resource: Prometheus Docs, Grafana Labs, Google SRE book.",
],
  software: [
  "Learn core programming fundamentals in one or more languages (e.g., Python, Java, C++). Master variables, data types, loops, conditionals, and functions. Understand debugging and error handling. Start with small coding exercises to build problem-solving skills. Time: 4-6 weeks. Resource: freeCodeCamp, W3Schools.",
  "Understand object-oriented programming (OOP) and other paradigms. Learn about classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Explore functional programming basics like higher-order functions and immutability. Time: 3-4 weeks. Resource: GeeksforGeeks OOP Tutorial, Refactoring Guru.",
  "Master data structures and algorithms. Learn arrays, linked lists, stacks, queues, hash tables, trees, graphs, and sorting/search algorithms. Practice complexity analysis (Big O notation) to write efficient code. Time: 6-8 weeks. Resource: LeetCode, HackerRank, CS50.",
  "Learn version control systems like Git. Understand branching, merging, pull requests, and resolving conflicts. Learn how to use GitHub or GitLab for collaborative development. Time: 1-2 weeks. Resource: Git Docs, GitHub Learning Lab.",
  "Understand software development methodologies. Learn Agile, Scrum, and Kanban principles. Understand the software development lifecycle (SDLC) and best practices for planning, building, testing, and deploying software. Time: 2-3 weeks. Resource: Agile Alliance, Scrum.org.",
  "Practice building full projects from scratch. Combine frontend, backend, and database skills to create complete applications. Learn how to write clean, maintainable code and document it properly. Time: 6-8 weeks. Resource: The Odin Project, Fullstackopen.com.",
  "Learn software testing and quality assurance. Understand unit testing, integration testing, and automated testing tools. Learn Test-Driven Development (TDD) principles to ensure software reliability. Time: 3-4 weeks. Resource: Jest Docs, Mocha Docs, PyTest Docs.",
  "Improve problem-solving and system design skills. Learn how to break down complex problems into smaller tasks. Understand system architecture, scalability, and design patterns. Time: 4-6 weeks. Resource: System Design Primer on GitHub, Design Patterns by Gamma et al.",
],
  cyber: [
  "Understand the CIA triad (Confidentiality, Integrity, Availability), types of cyber threats, and basic security principles. Study different attack vectors like phishing, malware, and ransomware. Time: 3-4 weeks. Resource: Cybrary, OWASP Top 10 Overview.",
  "Learn about TCP/IP, HTTP/HTTPS, DNS, firewalls, VPNs, and network topologies. Explore packet analysis tools like Wireshark to inspect network traffic. Time: 4-6 weeks. Resource: Cisco Networking Academy, Wireshark Docs.",
  "Learn how to secure Windows and Linux systems, configure permissions, and manage user accounts. Explore OS hardening techniques and secure shell (SSH) usage. Time: 3-5 weeks. Resource: Linux Journey, Microsoft Learn Security Fundamentals.",
  "Understand symmetric vs asymmetric encryption, hashing, and digital signatures. Explore SSL/TLS, public key infrastructure (PKI), and how encryption secures data in transit and at rest. Time: 3-4 weeks. Resource: Cryptography and Network Security by William Stallings, SSL.com Docs.",
  "Learn how to identify vulnerabilities using tools like Nmap, Metasploit, and Burp Suite. Practice ethical hacking in legal environments such as TryHackMe or HackTheBox. Time: 6-8 weeks. Resource: TryHackMe, Offensive Security Training.",
  "Learn about SQL injection, cross-site scripting (XSS), cross-site request forgery (CSRF), and other common vulnerabilities. Study the OWASP Top 10 in detail. Time: 3-5 weeks. Resource: OWASP.org, PortSwigger Web Security Academy.",
  "Understand how to monitor for intrusions, investigate breaches, and apply digital forensics. Study security event management (SIEM) tools like Splunk. Time: 4-6 weeks. Resource: Splunk Fundamentals, SANS DFIR Resources.",
  "Study cloud security, IoT security, and compliance frameworks like GDPR and ISO 27001. Learn about security certifications such as CompTIA Security+, CEH, and CISSP. Time: 6-8 weeks. Resource: CompTIA, ISC².",
],
business: [
  "Understand the role of a business analyst, key concepts like stakeholders, requirements gathering, and business processes. Time: 2-3 weeks. Resource: BABOK Guide, Coursera Business Analysis Fundamentals.",
  "Learn how to conduct interviews, workshops, surveys, and document analysis to gather clear and actionable requirements. Time: 3-4 weeks. Resource: Modern Analyst Tutorials, IIBA Resources.",
  "Learn how to create flowcharts, BPMN diagrams, and use tools like Microsoft Visio or Lucidchart to visualize business processes. Time: 3-4 weeks. Resource: Lucidchart Tutorials, BPMN Guide.",
  "Develop strong communication and stakeholder management skills. Practice writing clear reports, creating presentations, and managing conflicting stakeholder needs effectively. Time: 2-3 weeks. Resource: MindTools Communication Skills, Toastmasters.",
  "Understand how to interpret data, use Excel or Google Sheets for analysis, and create dashboards to support decision making. Time: 3-4 weeks. Resource: Excel Jet, DataCamp Intro to Data Analysis.",
  "Familiarize with business intelligence tools and software. Get hands-on experience with tools like Tableau, Power BI, or Google Data Studio to visualize data insights. Time: 4-5 weeks. Resource: Tableau Public Training, Microsoft Power BI Docs.",
  "Learn how business analysts work in Agile teams, manage user stories, and support product owners. Time: 3-4 weeks. Resource: Scrum.org, Agile Alliance.",
  "Work on sample business cases, write requirement documents, and collaborate with teams to simulate business analysis tasks. Time: 4-6 weeks. Resource: BA Times Case Studies, Project Management Institute (PMI).",
],
ai: [
  "Study linear algebra, calculus, probability, and statistics, which are essential for understanding AI algorithms. Time: 4-6 weeks. Resource: Khan Academy Math, 3Blue1Brown videos.",
  "Focus on Python due to its rich AI ecosystem, and explore libraries like NumPy, Pandas, and Matplotlib for data manipulation and visualization. Time: 3-4 weeks. Resource: Python.org, Real Python Tutorials.",
  "Understand supervised, unsupervised, and reinforcement learning. Learn algorithms like linear regression, decision trees, clustering, and neural networks. Time: 6-8 weeks. Resource: Coursera Machine Learning by Andrew Ng, fast.ai.",
  "Study architectures like CNNs, RNNs, and transformers. Practice building models using frameworks like TensorFlow and PyTorch. Time: 6-8 weeks. Resource: TensorFlow Tutorials, PyTorch Documentation.",
  "Learn techniques for cleaning data, handling missing values, and transforming features to improve model performance. Time: 3-4 weeks. Resource: Kaggle Learn, DataCamp.",
  "Build projects like image classifiers, chatbots, or recommendation systems to apply your skills practically. Time: 4-6 weeks. Resource: Kaggle Competitions, GitHub Project Repositories.",
  "Understand REST APIs, containerization with Docker, and cloud platforms like AWS, GCP, or Azure for hosting AI models. Time: 3-4 weeks. Resource: AWS AI Services Docs, Docker Tutorials.",
  "Study fairness, bias, privacy issues, and stay updated with papers from conferences like NeurIPS and ICML. Time: Continuous. Resource: AI Ethics Guidelines by IEEE, arXiv.org.",
],
web: [
  "Learn HTML fundamentals to create the structure of webpages. Study semantic tags, forms, and accessibility basics. Practice building simple static pages. Time: 2-3 weeks. Resource: MDN Web Docs HTML, w3Schools HTML Tutorial.",
  "Understand selectors, box model, flexbox, grid, and responsive design with media queries. Practice creating layouts that work on all devices. Time: 3-4 weeks. Resource: CSS-Tricks, MDN CSS Guide.",
  "Get comfortable with JavaScript for frontend interactivity. Learn ES6+ features, DOM manipulation, event handling, and asynchronous programming. Time: 4-5 weeks. Resource: JavaScript.info, Eloquent JavaScript.",
  "Learn a frontend framework like React, Vue, or Angular. Understand components, state management, routing, and hooks (if React). Build small projects to reinforce concepts. Time: 5-6 weeks. Resource: React Official Docs, Vuejs.org.",
  "Learn server-side programming with Node.js or another language, create APIs, and handle database integration. Time: 5-6 weeks. Resource: Node.js Docs, Express.js Guide.",
  "Work with databases. Learn both relational (MySQL, PostgreSQL) and non-relational (MongoDB) databases. Practice CRUD operations and data modeling. Time: 3-4 weeks. Resource: MongoDB University, SQLBolt.",
  "Learn version control with Git, hosting with services like Netlify, Vercel, or Heroku, and continuous integration basics. Time: 2-3 weeks. Resource: GitHub Docs, Netlify Tutorials.",
  "Learn about optimization techniques, caching, HTTPS, authentication, and common vulnerabilities (OWASP). Time: 3-4 weeks. Resource: web.dev, OWASP Top 10.",
],
full: [
  "Frontend fundamentals: HTML, CSS, and JavaScript. Build responsive, accessible web pages and understand DOM manipulation and event handling. Time: 4-6 weeks. Resource: MDN Web Docs, freeCodeCamp.",
  "Choose one frontend framework/library like React, Vue, or Angular. Focus on components, state management, routing, and hooks (React). Build interactive user interfaces. Time: 6-8 weeks. Resource: React Docs, Vue.js Guide.",
  "Understand backend development - Node.js and Express.js (or any other backend language). Learn to build RESTful APIs, handle routing, and middleware. Time: 5-6 weeks. Resource: Node.js Docs, Express.js Guide.",
  "Get comfortable with databases: both relational (PostgreSQL, MySQL) and NoSQL (MongoDB). Learn schema design, querying, and ORM tools like Sequelize or Mongoose. Time: 4-5 weeks. Resource: MongoDB University, SQLBolt.",
  "Learn about sessions, JWT, OAuth, and secure password storage. Understand best security practices. Time: 3-4 weeks. Resource: Auth0 Docs, OWASP Authentication Cheat Sheet.",
  "Get familiar with cloud services (AWS, Heroku, Vercel), containerization with Docker, and CI/CD pipelines. Time: 3-4 weeks. Resource: AWS Free Tier, Docker Docs.",
  "Build complete applications integrating frontend, backend, and databases. Use Git for version control and host projects publicly. Time: 6-8 weeks. Resource: The Odin Project, Fullstackopen.com.",
  "Learn testing frameworks (Jest, Mocha), code optimization, debugging, and monitoring tools. Understand scalable architecture principles. Time: 4-5 weeks. Resource: Jest Docs, web.dev Performance Guide.",
],
ui: [
  "Study color theory, typography, spacing, and layout basics to create visually appealing interfaces. Time: 3-4 weeks. Resource: The Interaction Design Foundation, Canva Design School.",
  "Learn about buttons, forms, navigation, cards, and modals, and how to use them consistently. Time: 3-4 weeks. Resource: Material Design Guidelines, Nielsen Norman Group Articles.",
  "Master software like Figma, Adobe XD, or Sketch for creating wireframes, prototypes, and mockups. Practice designing simple screens and interactive flows. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Learn user research methods, personas, user journeys, and usability testing to design with the user in mind. Time: 3-4 weeks. Resource: UX Design CC, Nielsen Norman Group.",
  "Start with low-fidelity wireframes and gradually build high-fidelity prototypes with interactive elements. Time: 3-4 weeks. Resource: InVision Tutorials, Figma Community.",
  "Understand how to design for diverse users, including color contrast, keyboard navigation, and screen reader compatibility. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Learn to hand off designs with proper specifications and assets. Understand design systems and version control for design files. Time: 2-3 weeks. Resource: Zeplin Docs, Figma Handoff Guide.",
  "Create a collection of projects showcasing your design process, problem-solving, and final UI designs. Get feedback and iterate on your work. Time: 4-6 weeks. Resource: Behance, Dribbble.",
],
ux: [
  "Understand the difference between UX and UI, key concepts like usability, accessibility, and user-centered design. Time: 2-3 weeks. Resource: Nielsen Norman Group, Interaction Design Foundation.",
  "Learn how to conduct interviews, surveys, and usability testing to gather user needs and pain points. Time: 3-4 weeks. Resource: UX Research by Nielsen Norman Group, Coursera UX Research.",
  "Create detailed personas and map user flows to identify friction points and opportunities. Time: 3-4 weeks. Resource: UX Design CC, Smashing Magazine.",
  "Use tools like Figma, Adobe XD, or Sketch to build low and high-fidelity prototypes for testing and iteration. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Conduct tests with real users, gather feedback, and analyze results to improve designs. Time: 3-4 weeks. Resource: Usability.gov, MeasuringU.",
  "Organize content effectively and design intuitive navigation and interactions. Time: 3-4 weeks. Resource: UXBooth, The Interaction Design Foundation.",
  "Learn standards to ensure your designs are usable by people with disabilities. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Build a UX portfolio showcasing your process. Include case studies with research, wireframes, prototypes, and user feedback to demonstrate your skills. Time: 4-6 weeks. Resource: Behance, Dribbble UX Collections.",
],
uiux: [
  "Learn design fundamentals covering both UI and UX principles. Study color theory, typography, layout, usability, accessibility, and user-centered design. Time: 3-4 weeks. Resource: Interaction Design Foundation, The Design of Everyday Things by Don Norman.",
  "Learn to conduct interviews, surveys, and usability tests to gather user needs and analyze pain points. Time: 3-4 weeks. Resource: Nielsen Norman Group UX Research, Coursera UX Design.",
  "Use tools like Figma, Adobe XD, or Sketch to create wireframes and interactive prototypes for testing design ideas. Time: 4-5 weeks. Resource: Figma Learn, Adobe XD Tutorials.",
  "Learn about UI components, design systems, consistency, and interactive design patterns. Practice creating polished visual designs. Time: 3-4 weeks. Resource: Material Design Guidelines, Dribbble.",
  "Organize content effectively and design intuitive user flows and navigation. Time: 3-4 weeks. Resource: UXBooth, The Interaction Design Foundation.",
  "Ensure your designs are usable by people with disabilities by following standards and guidelines. Time: 2-3 weeks. Resource: WebAIM, W3C Accessibility Guidelines.",
  "Learn design handoff, documentation, and version control using tools like Zeplin and Figma. Time: 2-3 weeks. Resource: Zeplin Docs, Figma Handoff Guide.",
  "Showcase your end-to-end design process with case studies, including research, wireframes, prototypes, visual designs, and user feedback. Time: 4-6 weeks. Resource: Behance, Dribbble.",
],
cloud: [
  "Learn the core concepts of IaaS, PaaS, SaaS, and cloud deployment models (public, private, hybrid). Time: 2-3 weeks. Resource: AWS Cloud Practitioner Essentials, Microsoft Learn Cloud Fundamentals.",
  "Explore AWS, Microsoft Azure, and Google Cloud Platform services and interfaces. Time: 4-6 weeks. Resource: AWS Free Tier, Azure Fundamentals, Google Cloud Training.",
  "Understand how to create and manage VMs and use Docker for containerizing applications. Time: 3-4 weeks. Resource: Docker Docs, Microsoft Learn Containers.",
  "Study VPCs, subnets, routing, load balancing, and DNS management in cloud environments. Time: 3-4 weeks. Resource: AWS Networking Docs, Azure Networking Tutorials.",
  "Learn about object storage, block storage, and managed database services in the cloud. Time: 3-4 weeks. Resource: AWS S3 Docs, Google Cloud Storage Docs.",
  "Get hands-on with tools like Terraform, CloudFormation, or Azure Resource Manager for automated deployments. Time: 4-5 weeks. Resource: Terraform Docs, AWS CloudFormation Tutorials.",
  "Study identity and access management (IAM), encryption, monitoring, and compliance standards like GDPR and HIPAA. Time: 3-4 weeks. Resource: AWS Security Docs, CIS Cloud Benchmarks.",
  "Build real projects, implement CI/CD pipelines, and monitor cloud resources for performance and cost. Time: 5-6 weeks. Resource: Cloud Academy, A Cloud Guru.",
],
solution: [
  "Learn architectural patterns, design principles (SOLID, DRY), and system components. Time: 3-4 weeks. Resource: 'Clean Architecture' by Robert C. Martin, Software Architecture Fundamentals videos.",
  "Explore AWS, Azure, or Google Cloud, focusing on core services and how to architect scalable, reliable systems. Time: 4-6 weeks. Resource: AWS Solutions Architect Certification, Microsoft Azure Architect Docs.",
  "Study load balancing, caching strategies, database sharding, and microservices architecture. Time: 5-6 weeks. Resource: 'Designing Data-Intensive Applications' by Martin Kleppmann, System Design Primer GitHub.",
  "Understand REST, GraphQL, messaging queues, event-driven architecture, and service orchestration. Time: 3-4 weeks. Resource: Microsoft Docs on API Design, Enterprise Integration Patterns book.",
  "Learn identity management, authentication, authorization, data encryption, and compliance frameworks. Time: 3-4 weeks. Resource: OWASP, CISSP Study Guides.",
  "Get hands-on with CI/CD pipelines, container orchestration (Kubernetes), and Infrastructure as Code (Terraform, CloudFormation). Time: 4-5 weeks. Resource: Kubernetes Docs, HashiCorp Terraform Tutorials.",
  "Learn to create architecture diagrams, write clear documentation, and present solutions to stakeholders. Time: 2-3 weeks. Resource: C4 Model Docs, Structurizr.",
  "Design end-to-end systems solving complex business problems, focusing on performance, scalability, and maintainability. Time: 6-8 weeks. Resource: Case studies on AWS Architecture Center, GitHub projects.",
],
projectManager: [
  "Understand project life cycles, methodologies (Waterfall, Agile, Scrum), and key terminology. Time: 3-4 weeks. Resource: PMBOK Guide, 'Project Management for Dummies'.",
  "Learn how to define scope, set objectives, create work breakdown structures (WBS), and develop timelines. Time: 3-4 weeks. Resource: Wrike Project Planning Guide, Smartsheet Tutorials.",
  "Understand Gantt charts, critical path method (CPM), resource allocation, and cost estimation. Time: 3-4 weeks. Resource: Microsoft Project Tutorials, Coursera Project Scheduling Course.",
  "Learn conflict resolution, negotiation, team motivation, and stakeholder management. Time: 2-3 weeks. Resource: 'Crucial Conversations' by Patterson et al., Harvard Business Review articles.",
  "Learn to identify, assess, and mitigate project risks, as well as create contingency plans. Time: 2-3 weeks. Resource: PMI Risk Management Professional (PMI-RMP) resources.",
  "Use tools like Jira, Trello, and Asana to track deliverables, manage dependencies, and report progress. Time: 2-3 weeks. Resource: Atlassian Jira Tutorials, Asana Academy.",
  "Understand QA processes, testing strategies, and continuous improvement practices. Time: 2-3 weeks. Resource: ISO 9001 Quality Management Guides, QA tutorials.",
  "Manage a mock project from initiation to closure, applying all learned skills in planning, execution, and delivery. Time: 4-6 weeks. Resource: Capstone projects on Coursera, PMI case studies.",
],
};